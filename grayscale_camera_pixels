import cv2
import numpy as np
from PIL import Image

# Initialize the webcam
cap = cv2.VideoCapture(0)  # 0 for the default webcam

# Set the desired resolution
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 480)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 360)

output_width = 8  # Number of squares horizontally
output_height = 8  # Number of squares vertically

# Calculate the width and height of each square
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
square_width = width // output_width
square_height = height // output_height
num_pixels = square_width * square_height

# Set the interval for publishing images (in seconds)
publish_interval = 1  # Adjust this value as desired

def get_average_grayscale(img, x, y, square_width, square_height):
    """
    Calculate the average grayscale value of a square region in the image.
    """
    roi = img[y:y+square_height, x:x+square_width]
    sum_gray = np.sum(roi)
    average_gray = int(sum_gray / num_pixels)
    return average_gray

while True:
    # Capture a frame from the webcam
    ret, frame = cap.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Create a blank image for the grid
    grid = np.zeros((height, width), dtype=np.uint8)

    # Iterate over the squares and calculate the average grayscale value
    for y in range(output_height):
        for x in range(output_width):
            avg_gray = get_average_grayscale(gray, x * square_width, y * square_height, square_width, square_height)
            cv2.rectangle(grid, (x * square_width, y * square_height), ((x + 1) * square_width, (y + 1) * square_height), avg_gray, -1)

    # Display the grid as a video feed
    cv2.imshow('Grid', grid)

    # Publish an image every X seconds
    #if cv2.waitKey(1) & 0xFF == ord('p'):
    #    cv2.imwrite(f'grid_image_{publish_interval}s.png', grid)
    #    print(f"Image published: grid_image_{publish_interval}s.png")

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close all windows
cap.release()
cv2.destroyAllWindows()
